// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rugwirobaker/helmes (interfaces: SendService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	helmes "github.com/rugwirobaker/helmes"
	reflect "reflect"
)

// MockSendService is a mock of SendService interface
type MockSendService struct {
	ctrl     *gomock.Controller
	recorder *MockSendServiceMockRecorder
}

// MockSendServiceMockRecorder is the mock recorder for MockSendService
type MockSendServiceMockRecorder struct {
	mock *MockSendService
}

// NewMockSendService creates a new mock instance
func NewMockSendService(ctrl *gomock.Controller) *MockSendService {
	mock := &MockSendService{ctrl: ctrl}
	mock.recorder = &MockSendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendService) EXPECT() *MockSendServiceMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockSendService) Send(arg0 context.Context, arg1 *helmes.SMS) (*helmes.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*helmes.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockSendServiceMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendService)(nil).Send), arg0, arg1)
}
